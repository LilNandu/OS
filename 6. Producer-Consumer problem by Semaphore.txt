#include <stdio.h>
#include <stdlib.h>

int mutex = 1; // Semaphore for mutual exclusion
int full = 0;  // Count of full slots
int empty = 3; // Count of empty slots (Buffer size = 3)
int x = 0;     // Item count

int wait(int s) {
    return (--s);
}

int signal(int s) {
    return (++s);
}

// Function to produce an item and add it to the buffer
void producer() {
    mutex = wait(mutex);
    full = signal(full);
    empty = wait(empty);
    x++; // Item produced
    printf("\nProducer produces item %d", x);
    mutex = signal(mutex);
}

// Function to consume an item and remove it from the buffer
void consumer() {
    mutex = wait(mutex);
    full = wait(full);
    empty = signal(empty);
    printf("\nConsumer consumes item %d", x);
    x--; // Item consumed
    mutex = signal(mutex);
}

int main() {
    int n;

    printf("\n--- Producer-Consumer Problem using Semaphores ---");
    printf("\n1. Press 1 for Producer");
    printf("\n2. Press 2 for Consumer");
    printf("\n3. Press 3 to Exit");

    while (1) {
        printf("\nEnter your choice: ");
        scanf("%d", &n);
        switch (n) {
            case 1:
                // If mutex is 1 and empty slots are available, then produce
                if ((mutex == 1) && (empty != 0)) {
                    producer();
                } else {
                    printf("\nBuffer is full!");
                }
                break;

            case 2:
                // If mutex is 1 and full slots are available, then consume
                if ((mutex == 1) && (full != 0)) {
                    consumer();
                } else {
                    printf("\nBuffer is empty!");
                }
                break;

            case 3:
                printf("\nExiting... We have studied the Producer-Consumer problem using semaphores.\n");
                exit(0);

            default:
                printf("\nInvalid choice! Please enter 1, 2, or 3.");
                break;
        }
    }
    return 0;
}
