// Experiment 5 - Write a program to demonstrate the concept of non-pre-emptive
// scheduling algorithms (FCFS Algorithm)
// Shital K Dhamal


#include <stdio.h>


struct Process {
    int pid;         // Process ID
    int arrival;     // Arrival time
    int burst;       // Burst time
    int completion;  // Completion time
    int waiting;     // Waiting time
    int turnaround;  // Turnaround time
};


int main()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);


    struct Process process[n];


    // Input details for each process
    for (int i = 0; i < n; i++) {
        process[i].pid = i + 1; // Assign process ID starting from 1
        printf("Enter arrival time and burst time for process %d: ", process[i].pid);
        scanf("%d %d", &process[i].arrival, &process[i].burst);
    }


    // Sort the processes based on arrival time using Bubble Sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (process[i].arrival > process[j].arrival) {
                struct Process temp = process[i];
                process[i] = process[j];
                process[j] = temp;
            }
        }
    }


    // Completion time for the first process
    process[0].completion = process[0].arrival + process[0].burst;


    // Handle Process P1 separately
    process[0].turnaround = process[0].completion - process[0].arrival;
    process[0].waiting = 0; // P1's waiting time is 0, because it starts immediately.


    // Calculate completion, waiting, and turnaround times for the rest of the processes
    for (int i = 1; i < n; i++) {
        if (process[i].arrival > process[i - 1].completion) {
            // Process starts after arrival if no process is running
            process[i].completion = process[i].arrival + process[i].burst;
        } else {
            // Process starts after previous process completes
            process[i].completion = process[i - 1].completion + process[i].burst;
        }


        // Calculate turnaround time and waiting time
        process[i].turnaround = process[i].completion - process[i].arrival;
        process[i].waiting = process[i].turnaround - process[i].burst;
    }


    // Output the results
    printf("\nProcess ID | ArrivalTime | BurstTime | CompletionTime | WaitingTime | TATime\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
            process[i].pid, process[i].arrival, process[i].burst,
            process[i].completion, process[i].waiting, process[i].turnaround);
    }


    return 0;
}